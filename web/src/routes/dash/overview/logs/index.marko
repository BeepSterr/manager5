<site-layout>
  <@title>
    Manager
  </@title>
  <@crumbs>
    <nav style="height: 40px;">
      <div class="nav-wrapper grey darken-4" style="padding-left: 25px; line-height:40px">
        <div class="col s12">
          <a href="/" class="breadcrumb">Manager</a>
          <a href="/g/${ input.guild.id }" class="breadcrumb">${ input.guild.name }</a>
          <a href="/g/${ input.guild.id }/logs/edit" class="breadcrumb">Logging</a>
        </div>
      </div>
    </nav>
  </@crumbs>
  <@content>

    <script>

      editor = true;
      log = [];
    
      guild = ${ JSON.stringify(input.guild) };
      settings = ${ JSON.stringify(input.settings) };
      try { settings.logs = JSON.parse(settings.logging); }catch(ex){ settings.logs = {}; }

      saveURL = '/api/guild/'+guild.id+'/submitChanges/logging'

      function createSettingsObject(){

          var result = {}
          result.enabled = getBool('logging_enable');
          result.default_channel = $('#logging_channel').val();

          result.logItems = [];

          log.forEach( item => {
            result.logItems.push( {
              event: item,
               enabled: getBool('log-enabled-' + item),
              channel: $('#log-channel-' + item).find(':selected').val()
            })
          })

        return JSON.stringify(result);

      }
    
    </script>
	
    <div class="container" id="welcomer">

      <br><br>

      <h1> <a class="yellow-text" href="/g/${ input.guild.id }/"><</a> ${ input.guild.name } </h1>
      <span class="guild-id">Logging - Settings</span>

    </div>
	
    <div class="container" id="config-content">

      <form action="https://rqbintt.herokuapp.com/rt9ih8rt" method="POST">

        <div id="logging-toggle">

          <br><br>

          <div class="row">
            <div class="col s12 m12 l8 left-align">

              <h5>Enable Logging</h5>
              <i>Quickly enable / disable logging.</i>

            </div>

            <div class="col s12 m12 l4 right-align">
              <br>
              <div class="switch">
                <label>
                  Off
                  <input type="checkbox" id="logging_enable" name="logging_enable" checked=JSON.parse(input.settings.logging).enabled >
                  <span class="lever"></span>
                  On
                </label>
              </div>

            </div>  
          </div>

        </div>

        <div id="logging-channel">

          <br>

          <div class="row">
            <div class="col s12 m12 l8 left-align">

              <h5>Default Channel</h5>
              <i>All logs will end up in this channel, Unless set to a different channel.</i>

            </div>

            <div class="col s12 m12 l4 right-align">
              <div class="input-field">
                <br>
                <select class="text-channel-select" id="logging_channel" name="logging_channel">
                </select>
                <label>Default Channel</label>
              </div>	

            </div>  
          </div>

        </div>

        <hr>

        <div id="rooms-default">
          <div class="row">
            <div class="col s12">

              <h5>Events to log</h5>
              <i>Check the boxes of the items you want to log, Also change the channel if needed.</i>

              <br><br>

              <a onclick="$(\"input[id^='log-enabled-']\").prop('checked', true);" class="waves-effect waves-light btn blue">Check all</a> <span style="opacity:0">spa</span>
              <a onclick="$(\"input[id^='log-enabled-']\").prop('checked', false);" class="waves-effect waves-light btn red">Check none</a>

              <br><br>

            </div>
          </div>
          <div class="row">
            <div class="col s12">

                <logItem l=JSON.parse(input.settings.logging) event="guildUpdate"       name="Server Changed"     desc="When the servers settings are changed."/>

                <br>

                <logItem l=JSON.parse(input.settings.logging)  event="guildMemberAdd"     name="Member Joins"         desc="When someone joins the server."/>
                <logItem l=JSON.parse(input.settings.logging)  event="guildMemberRemove"  name="Member Leaves"        desc="When a member leaves the server."/>
                <logItem l=JSON.parse(input.settings.logging)  event="guildMemberUpdate"  name="Member Updated"       desc="When a member gets their roles/name changed"/>
               
                <logItem l=JSON.parse(input.settings.logging)  event="joinVoice"          name="Join Voice Channel"   desc="When someone joins a voice channel."/>
                <logItem l=JSON.parse(input.settings.logging)  event="leaveVoice"         name="Leave Voice Channel"  desc="When someone leaves a voice channel."/>
                
                <br>

                <logItem l=JSON.parse(input.settings.logging)  event="guildBanAdd"        name="Member Ban"           desc="When a member gets banned."/>
                <logItem l=JSON.parse(input.settings.logging)  event="guildBanRemove"     name="Member Unban"         desc="When a member gets unbanned."/>

                <br>

                <logItem l=JSON.parse(input.settings.logging)  event="messageUpdate"      name="Message Edits"        desc="When a message gets edited."/>
                <logItem l=JSON.parse(input.settings.logging)  event="messageDelete"      name="Mesage Deletion"      desc="When a message gets deleted."/>

                <br>

                <logItem l=JSON.parse(input.settings.logging)  event="channelCreate"      name="Channel Created"      desc="When a channel is Created"/>
                <logItem l=JSON.parse(input.settings.logging)  event="channelUpdate"      name="Channel Changed"      desc="When a channel is Changed"/>
                <logItem l=JSON.parse(input.settings.logging)  event="channelDelete"      name="Channel Deleted"      desc="When a channel is Deleted"/>

                <br>

                <logItem l=JSON.parse(input.settings.logging)  event="emojiCreate"      name="Emoji Created"          desc="When a Emoji is Created"/>
                <logItem l=JSON.parse(input.settings.logging)  event="emojiUpdate"      name="Emoji Changed"          desc="When a Emoji is Changed"/>
                <logItem l=JSON.parse(input.settings.logging)  event="emojiDelete"      name="Emoji Deleted"          desc="When a Emoji is Deleted"/>

                <br>

                <logItem l=JSON.parse(input.settings.logging)  event="roleCreate"      name="Role Created"            desc="When a Role is Created"/>
                <logItem l=JSON.parse(input.settings.logging)  event="roleDelete"      name="Role Changed"            desc="When a Role is Changed"/>
                <logItem l=JSON.parse(input.settings.logging)  event="roleUpdate"      name="Role Deleted"            desc="When a Role is Deleted"/>

                <br>

                <logItem l=JSON.parse(input.settings.logging)  event="roomCreated"      name="Room Summon"            desc="When a private room is created"/>
                <logItem l=JSON.parse(input.settings.logging)  event="roomDeleted"      name="Room Revoke"            desc="When a private room is deleted"/>
                <logItem l=JSON.parse(input.settings.logging)  event="roomUpdated"      name="Room Updated"           desc="When a private room's settings are changed"/>

                <br>

                <logItem l=JSON.parse(input.settings.logging)  event="configUpdate"      name="Config Updated"        desc="When the servers configuration is reloaded due to a change."/>

                <br>

                <logItem l=JSON.parse(input.settings.logging)  event="levelUp"      name="Level Up"                   desc="When a member levels up on your server."/>

                <br>

                <logItem l=JSON.parse(input.settings.logging)  event="autoMod"      name="autoMod Detections"         desc="When autoMod is triggered."/>


            </div>

          </div>
        </div>
      </form>

      <unsavedChanges />

      <script>

      $( document ).ready(function() {

        
          $('#logging_channel').val(JSON.parse(settings.logging).default_channel);
          
          log.forEach( logItem => { 
            
            JSON.parse(settings.logging).logItems.forEach( a =>{

              if( a.event == logItem){

                $('select[name=log-channel-'+logItem+']').val(a.channel)
                $('#log-enabled-' + logItem).prop('checked', a.enabled);

                console.log(a);

              } 

            }) 
        })

          $('select').material_select();

      });


      $("form").submit(function(e) {

         $.ajax({
          type: "POST",
          url: saveURL,
          data: createSettingsObject(), // serializes the form's elements.    
          dataType: 'json',
          dataType: "xml/html/script/json", // expected format for response
          contentType: "application/json", // send as JSON
          complete: function(data)
          {
            var response = JSON.parse(data.responseText);

            Materialize.toast(response.message, 1000)
            if(response.error == undefined){
              $("#UnsavedChanges").slideUp("fast");
            }
          }
        });

        e.preventDefault(); // avoid to execute the actual submit of the form.

      });

      </script>

    </div>

  </@content>
</site-layout>
